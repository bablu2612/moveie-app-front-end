{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { baseUrl } from '../Constant/constant';\nconst initialState = {\n  value: 0\n};\nexport const loginSubmit = createAsyncThunk(\"loginSubmit\", async values => {\n  var _res;\n  // const res = await fetch(`${baseUrl}/api/user/login`,{\n  //   method:POST\n  // });\n  axios.post(`${baseUrl}/api/user/login`, values);\n  console.log(\"responseeee\", res);\n  return (_res = res) === null || _res === void 0 ? void 0 : _res.json();\n});\nexport const movieSlice = createSlice({\n  name: 'movies',\n  //   reducers: {\n  //     increment: (state) => {\n  //       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n  //       // doesn't actually mutate the state because it uses the Immer library,\n  //       // which detects changes to a \"draft state\" and produces a brand new\n  //       // immutable state based off those changes\n  //       state.value += 1\n  //     },\n  //     decrement: (state) => {\n  //       state.value -= 1\n  //     },\n  //     incrementByAmount: (state, action) => {\n  //       state.value += action.payload\n  //     },\n  //   },\n  // })\n\n  // Action creators are generated for each case reducer function\n  // export const { increment, decrement, incrementByAmount } = movieSlice.actions\n\n  initialState: {\n    isLoading: false,\n    data: [],\n    isError: false\n  },\n  extraReducers: builder => {\n    builder.addCase(loginSubmit.pending, (state, action) => {\n      state.isLoading = true;\n    });\n    builder.addCase(loginSubmit.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.data = action.payload;\n    });\n    builder.addCase(loginSubmit.rejected, (state, action) => {\n      state.isError = true;\n    });\n  }\n});\nexport default movieSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","baseUrl","initialState","value","loginSubmit","values","_res","axios","post","console","log","res","json","movieSlice","name","isLoading","data","isError","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","reducer"],"sources":["/home/bablu/Music/movies-test-app/moveie-app-front-end/src/Reducer/MovieSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { baseUrl } from '../Constant/constant';\n\nconst initialState = {\n  value: 0,\n}\n\nexport const loginSubmit = createAsyncThunk(\"loginSubmit\", async (values) => {\n  // const res = await fetch(`${baseUrl}/api/user/login`,{\n  //   method:POST\n  // });\n  axios.post(`${baseUrl}/api/user/login`,values)\n  console.log(\"responseeee\",res)\n  return res?.json();\n});\n\nexport const movieSlice = createSlice({\n  name: 'movies',\n\n//   reducers: {\n//     increment: (state) => {\n//       // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n//       // doesn't actually mutate the state because it uses the Immer library,\n//       // which detects changes to a \"draft state\" and produces a brand new\n//       // immutable state based off those changes\n//       state.value += 1\n//     },\n//     decrement: (state) => {\n//       state.value -= 1\n//     },\n//     incrementByAmount: (state, action) => {\n//       state.value += action.payload\n//     },\n//   },\n// })\n\n// Action creators are generated for each case reducer function\n// export const { increment, decrement, incrementByAmount } = movieSlice.actions\n\ninitialState: {\n  isLoading: false,\n  data: [],\n  isError: false\n },\n extraReducers: (builder) => {\n  builder.addCase(loginSubmit.pending, (state, action) => {\n   state.isLoading = true;\n  })\n  builder.addCase(loginSubmit.fulfilled, (state, action) => {\n   state.isLoading = false;\n   state.data = action.payload;\n  })\n  builder.addCase(loginSubmit.rejected, (state, action) => {\n   state.isError = true;\n  })\n }\n})\n\nexport default movieSlice.reducer\n\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,OAAO,QAAQ,sBAAsB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGL,gBAAgB,CAAC,aAAa,EAAE,MAAOM,MAAM,IAAK;EAAA,IAAAC,IAAA;EAC3E;EACA;EACA;EACAC,KAAK,CAACC,IAAI,CAAC,GAAGP,OAAO,iBAAiB,EAACI,MAAM,CAAC;EAC9CI,OAAO,CAACC,GAAG,CAAC,aAAa,EAACC,GAAG,CAAC;EAC9B,QAAAL,IAAA,GAAOK,GAAG,cAAAL,IAAA,uBAAHA,IAAA,CAAKM,IAAI,CAAC,CAAC;AACpB,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAGb,WAAW,CAAC;EACpCc,IAAI,EAAE,QAAQ;EAEhB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEAZ,YAAY,EAAE;IACZa,SAAS,EAAE,KAAK;IAChBC,IAAI,EAAE,EAAE;IACRC,OAAO,EAAE;EACV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC3BA,OAAO,CAACC,OAAO,CAAChB,WAAW,CAACiB,OAAO,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACvDD,KAAK,CAACP,SAAS,GAAG,IAAI;IACvB,CAAC,CAAC;IACFI,OAAO,CAACC,OAAO,CAAChB,WAAW,CAACoB,SAAS,EAAE,CAACF,KAAK,EAAEC,MAAM,KAAK;MACzDD,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBO,KAAK,CAACN,IAAI,GAAGO,MAAM,CAACE,OAAO;IAC5B,CAAC,CAAC;IACFN,OAAO,CAACC,OAAO,CAAChB,WAAW,CAACsB,QAAQ,EAAE,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACxDD,KAAK,CAACL,OAAO,GAAG,IAAI;IACrB,CAAC,CAAC;EACH;AACD,CAAC,CAAC;AAEF,eAAeJ,UAAU,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}